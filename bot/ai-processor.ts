import OpenAI from 'openai';
import { TransactionData, FinancialQuery, BotResponse, UserContext } from './types';
import { storage } from '../server/storage';

export class AIProcessor {
  private openai: OpenAI;

  constructor() {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      console.warn('OpenAI API key not configured. AI processing will be disabled.');
      // Initialize with a dummy key to prevent constructor errors
      this.openai = new OpenAI({ apiKey: 'dummy-key' });
    } else {
      this.openai = new OpenAI({ apiKey });
    }
  }

  async processMessage(message: string, userContext: UserContext): Promise<BotResponse> {
    try {
      // Check if OpenAI API key is configured
      if (!process.env.OPENAI_API_KEY) {
        return {
          message: "‚ö†Ô∏è Bot n√£o configurado. OpenAI API key necess√°ria para processar mensagens.",
          success: false,
        };
      }

      // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
      const response = await this.openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: this.getSystemPrompt(),
          },
          {
            role: "user",
            content: message,
          },
        ],
        functions: this.getFunctionDefinitions(),
        function_call: "auto",
        temperature: 0.3,
      });

      const responseMessage = response.choices[0].message;

      if (responseMessage.function_call) {
        return await this.handleFunctionCall(
          responseMessage.function_call.name,
          responseMessage.function_call.arguments,
          userContext
        );
      }

      return {
        message: responseMessage.content || "Desculpe, n√£o consegui processar sua mensagem.",
        success: true,
      };
    } catch (error) {
      console.error('Error processing message with AI:', error);
      return {
        message: "üòî Ocorreu um erro ao processar sua mensagem. Tente novamente.",
        success: false,
      };
    }
  }

  private getSystemPrompt(): string {
    const today = new Date();
    const currentDate = today.toLocaleDateString('pt-BR', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    return `Voc√™ √© um assistente financeiro para o aplicativo FinanceFlow.

DATA ATUAL: ${currentDate} (13/07/2025)

REGRAS:
1. Responda APENAS a t√≥picos relacionados a finan√ßas
2. Para perguntas n√£o relacionadas a finan√ßas, responda: "Posso ajudar apenas com quest√µes financeiras"
3. Sempre use function calling para registrar transa√ß√µes
4. Seja amig√°vel mas conciso
5. Use portugu√™s brasileiro
6. Use emojis para deixar as respostas mais amig√°veis

CAPACIDADES:
- Registrar despesas e receitas
- Consultar resumos financeiros
- Fornecer insights de gastos
- Responder perguntas sobre finan√ßas

CATEGORIAS PADR√ÉO:
- Alimenta√ß√£o
- Transporte
- Sa√∫de
- Educa√ß√£o
- Lazer
- Moradia
- Roupas
- Sal√°rio
- Freelance
- Investimentos

PROCESSAMENTO DE DATAS:
HOJE √â 13/07/2025 (s√°bado). Use esta data como refer√™ncia para todos os c√°lculos.

Quando o usu√°rio mencionar uma data espec√≠fica, extraia e converta para formato ISO:
- "ontem" = 12/07/2025 (sexta-feira)
- "anteontem" = 11/07/2025 (quinta-feira)
- "segunda passada", "ter√ßa passada", etc = √∫ltimo dia da semana mencionado
- "dia 14", "dia 25" = dia espec√≠fico do m√™s atual (julho 2025)
- "dia 14 do m√™s passado" = dia espec√≠fico do m√™s anterior (junho 2025)
- "segunda-feira", "ter√ßa-feira" = pr√≥ximo ou √∫ltimo dia da semana
- Se n√£o mencionar data, use 13/07/2025

IMPORTANTE: Sempre passe a data no campo 'date' como string no formato 'YYYY-MM-DD'.

Quando o usu√°rio mencionar uma transa√ß√£o, extraia as informa√ß√µes e use a fun√ß√£o register_transaction.
Para consultas sobre finan√ßas, use a fun√ß√£o query_finances.`;
  }

  private getFunctionDefinitions() {
    return [
      {
        name: "register_transaction",
        description: "Registrar uma transa√ß√£o de despesa ou receita",
        parameters: {
          type: "object",
          properties: {
            amount: {
              type: "number",
              description: "Valor da transa√ß√£o",
            },
            type: {
              type: "string",
              enum: ["income", "expense"],
              description: "Tipo da transa√ß√£o",
            },
            category: {
              type: "string",
              description: "Categoria da transa√ß√£o",
            },
            description: {
              type: "string",
              description: "Descri√ß√£o da transa√ß√£o",
            },
            date: {
              type: "string",
              format: "date",
              description: "Data da transa√ß√£o no formato YYYY-MM-DD. Interprete express√µes como 'ontem', 'ter√ßa passada', 'dia 14', etc. Se n√£o especificado, use hoje.",
            },
          },
          required: ["amount", "type", "category", "description"],
        },
      },
      {
        name: "query_finances",
        description: "Consultar informa√ß√µes financeiras do usu√°rio",
        parameters: {
          type: "object",
          properties: {
            period: {
              type: "string",
              enum: ["today", "week", "month", "year"],
              description: "Per√≠odo da consulta",
            },
            type: {
              type: "string",
              enum: ["summary", "expenses", "income", "balance"],
              description: "Tipo de consulta",
            },
          },
          required: ["period", "type"],
        },
      },
    ];
  }

  private async handleFunctionCall(
    functionName: string,
    argumentsJson: string,
    userContext: UserContext
  ): Promise<BotResponse> {
    try {
      const args = JSON.parse(argumentsJson);

      if (functionName === "register_transaction") {
        return await this.registerTransaction(args, userContext);
      }

      if (functionName === "query_finances") {
        return await this.queryFinances(args, userContext);
      }

      return {
        message: "Fun√ß√£o n√£o reconhecida.",
        success: false,
      };
    } catch (error) {
      console.error('Error handling function call:', error);
      return {
        message: "üòî Ocorreu um erro ao processar sua solicita√ß√£o.",
        success: false,
      };
    }
  }

  private async registerTransaction(
    data: TransactionData,
    userContext: UserContext
  ): Promise<BotResponse> {
    try {
      // Find or create category
      let category = await storage.getCategoryByName(data.category, userContext.userId);
      if (!category) {
        category = await storage.createCategory({
          name: data.category,
          type: data.type,
          color: '#6B7280',
          icon: 'category',
          isDefault: false,
        });
      }

      // Create transaction
      const transaction = await storage.createTransaction({
        userId: userContext.userId,
        amount: data.amount.toString(),
        type: data.type,
        categoryId: category.id,
        description: data.description,
        transactionDate: data.date ? new Date(data.date) : new Date(),
        source: 'whatsapp',
      });

      const typeEmoji = data.type === 'income' ? 'üí∞' : 'üí∏';
      const transactionDate = data.date ? new Date(data.date) : new Date();
      const dateStr = this.formatDateForMessage(transactionDate);
      
      const message = `‚úÖ ${data.type === 'income' ? 'Receita' : 'Despesa'} registrada!
${typeEmoji} R$ ${data.amount.toFixed(2).replace('.', ',')} - ${data.category}
üìù ${data.description}
üìÖ ${dateStr}`;

      return {
        message,
        success: true,
        data: transaction,
      };
    } catch (error) {
      console.error('Error registering transaction:', error);
      return {
        message: "üòî Erro ao registrar a transa√ß√£o. Tente novamente.",
        success: false,
      };
    }
  }

  private async queryFinances(
    query: FinancialQuery,
    userContext: UserContext
  ): Promise<BotResponse> {
    try {
      const { startDate, endDate } = this.getPeriodDates(query.period);
      
      if (query.type === 'summary' || query.type === 'balance') {
        const balance = await storage.getUserBalance(userContext.userId, startDate, endDate);
        
        const periodText = this.getPeriodText(query.period);
        const message = `üìä Resumo Financeiro - ${periodText}
üí∞ Receitas: R$ ${balance.income.toFixed(2).replace('.', ',')}
üí∏ Despesas: R$ ${balance.expense.toFixed(2).replace('.', ',')}
${balance.balance >= 0 ? 'üíö' : '‚ù§Ô∏è'} Saldo: R$ ${balance.balance.toFixed(2).replace('.', ',')}`;

        return {
          message,
          success: true,
          data: balance,
        };
      }

      if (query.type === 'expenses' || query.type === 'income') {
        const transactions = await storage.getTransactionsByUserAndType(
          userContext.userId,
          query.type as 'income' | 'expense',
          startDate,
          endDate
        );

        const total = transactions.reduce((sum, t) => sum + Number(t.amount), 0);
        const typeEmoji = query.type === 'income' ? 'üí∞' : 'üí∏';
        const typeText = query.type === 'income' ? 'Receitas' : 'Despesas';
        const periodText = this.getPeriodText(query.period);

        let message = `${typeEmoji} ${typeText} - ${periodText}
Total: R$ ${total.toFixed(2).replace('.', ',')}`;

        if (transactions.length > 0) {
          message += '\n\nüìã √öltimas transa√ß√µes:';
          transactions.slice(0, 5).forEach(t => {
            message += `\n‚Ä¢ R$ ${Number(t.amount).toFixed(2).replace('.', ',')} - ${t.description}`;
          });
        }

        return {
          message,
          success: true,
          data: { transactions, total },
        };
      }

      return {
        message: "Tipo de consulta n√£o reconhecido.",
        success: false,
      };
    } catch (error) {
      console.error('Error querying finances:', error);
      return {
        message: "üòî Erro ao consultar suas finan√ßas. Tente novamente.",
        success: false,
      };
    }
  }

  private getPeriodDates(period: string): { startDate: Date; endDate: Date } {
    const now = new Date();
    const endDate = new Date(now);
    let startDate = new Date(now);

    switch (period) {
      case 'today':
        startDate.setHours(0, 0, 0, 0);
        endDate.setHours(23, 59, 59, 999);
        break;
      case 'week':
        startDate.setDate(now.getDate() - 7);
        break;
      case 'month':
        startDate.setMonth(now.getMonth() - 1);
        break;
      case 'year':
        startDate.setFullYear(now.getFullYear() - 1);
        break;
    }

    return { startDate, endDate };
  }

  private getPeriodText(period: string): string {
    const now = new Date();
    const months = [
      'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
      'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
    ];

    switch (period) {
      case 'today':
        return 'Hoje';
      case 'week':
        return '√öltimos 7 dias';
      case 'month':
        return `${months[now.getMonth()]} ${now.getFullYear()}`;
      case 'year':
        return `${now.getFullYear()}`;
      default:
        return period;
    }
  }

  private formatDateForMessage(date: Date): string {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const isToday = date.toDateString() === today.toDateString();
    const isYesterday = date.toDateString() === yesterday.toDateString();
    
    if (isToday) {
      return 'Hoje';
    } else if (isYesterday) {
      return 'Ontem';
    } else {
      // Formata√ß√£o brasileira: dd/mm/aaaa
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();
      
      // Adicionar dia da semana em portugu√™s
      const weekdays = ['Domingo', 'Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado'];
      const weekday = weekdays[date.getDay()];
      
      return `${weekday}, ${day}/${month}/${year}`;
    }
  }
}
